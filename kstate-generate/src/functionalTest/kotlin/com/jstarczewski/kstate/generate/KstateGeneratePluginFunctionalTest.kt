/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.jstarczewski.kstate.generate

import junit.framework.TestCase.assertEquals
import junit.framework.TestCase.fail
import org.gradle.testkit.runner.GradleRunner
import org.junit.Rule
import org.junit.Test
import org.junit.rules.TemporaryFolder
import java.io.File

class KstateGeneratePluginFunctionalTest {

    @get:Rule
    val tempFolder = TemporaryFolder()

    private fun getProjectDir() = tempFolder.root
    private fun getBuildFile() = getProjectDir().resolve("build.gradle")
    private fun getSettingsFile() = getProjectDir().resolve("settings.gradle")

    @Test
    fun `generated ObservableStateHolder with extension swift content is equal to template content`() {

        val expectedObservableStateHolderContent = """
            import Foundation
            import common

            class ObservableStateHolder<StateHolder>: ObservableObject where StateHolder: common.KstateStateHolder {

                var stateHolder: StateHolder

                init(_ stateHolder: StateHolder) {
                    self.stateHolder = stateHolder
                    self.stateHolder.binder.objectWillChange = { [weak self] in
                        DispatchQueue.main.async {
                            self?.objectWillChange.send()
                        }
                    }
                }
            }
            
        """.trimIndent()

        val expectedRelativeFilesPath = "ios/ios/StateHolder"
        getSettingsFile().writeText("")
        getBuildFile().writeText(
            """
        plugins {
            id('com.jstarczewski.kstate.generate')
        }
        
        swiftTemplates {

            outputDir = "$expectedRelativeFilesPath"
            sharedModuleName = "common"
        }
        """
        )
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("generateSwiftTemplates")
        runner.withProjectDir(getProjectDir())
        runner.build()

        val content = File("${getProjectDir().absolutePath}/$expectedRelativeFilesPath/ObservableStateHolder.swift")
            .readText()
        assertEquals(expectedObservableStateHolderContent, content)
    }

    @Test
    fun `generated ObservedStateHolder with extension swift content is equal to template content`() {

        val expectedObservedStateHolderContent = """
            import Foundation
            import SwiftUI
            import common

            @propertyWrapper
            struct ObservedStateHolder<StateHolder>: DynamicProperty where StateHolder: common.KstateStateHolder {

                @ObservedObject private var stateHolderObservable: ObservableStateHolder<StateHolder>

                init(wrappedValue: StateHolder) {
                    self.stateHolderObservable = ObservableStateHolder(wrappedValue)
                }

                var wrappedValue: StateHolder {
                    get { return stateHolderObservable.stateHolder }
                    set { stateHolderObservable.stateHolder = newValue }
                }

                var projectedValue: ObservedObject<ObservableStateHolder<StateHolder>>.Wrapper {
                    self.${'$'}stateHolderObservable
                }
            }
            
        """.trimIndent()

        val expectedRelativeFilesPath = "ios/ios/StateHolder"
        getSettingsFile().writeText("")
        getBuildFile().writeText(
            """
        plugins {
            id('com.jstarczewski.kstate.generate')
        }
        
        swiftTemplates {

            outputDir = "$expectedRelativeFilesPath"
            sharedModuleName = "common"
        }
        """
        )
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("generateSwiftTemplates")
        runner.withProjectDir(getProjectDir())
        runner.build()

        val content = File("${getProjectDir().absolutePath}/$expectedRelativeFilesPath/ObservedStateHolder.swift")
            .readText()
        assertEquals(expectedObservedStateHolderContent, content)
    }

    @Test
    fun `generated StateStateHolder with extension swift content is equal to template content`() {

        val expectedStateStateHolderContent = """
            import Foundation
            import SwiftUI
            import common

            @propertyWrapper
            struct StateStateHolder<StateHolder>: DynamicProperty where StateHolder: common.KstateStateHolder {

                @StateObject private var stateHolderObservable: ObservableStateHolder<StateHolder>

                init(wrappedValue: StateHolder) {
                    _stateHolderObservable = StateObject(wrappedValue: ObservableStateHolder(wrappedValue))
                }

                var wrappedValue: StateHolder {
                    get { return stateHolderObservable.stateHolder }
                    set { stateHolderObservable.stateHolder = newValue }
                }

                var projectedValue: ObservedObject<ObservableStateHolder<StateHolder>>.Wrapper {
                    self.${'$'}stateHolderObservable
                }
            }
            
        """.trimIndent()

        val expectedRelativeFilesPath = "ios/ios/StateHolder"
        getSettingsFile().writeText("")
        getBuildFile().writeText(
            """
        plugins {
            id('com.jstarczewski.kstate.generate')
        }
        
        swiftTemplates {

            outputDir = "$expectedRelativeFilesPath"
            sharedModuleName = "common"
        }
        """
        )
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("generateSwiftTemplates")
        runner.withProjectDir(getProjectDir())
        runner.build()

        val content = File("${getProjectDir().absolutePath}/$expectedRelativeFilesPath/StateStateHolder.swift")
            .readText()
        assertEquals(expectedStateStateHolderContent, content)
    }

    @Test
    fun `no configuration should result in configuration with default parameters`() {

        val expectedStateStateHolderContent = """
            import Foundation
            import SwiftUI
            import shared

            @propertyWrapper
            struct StateStateHolder<StateHolder>: DynamicProperty where StateHolder: shared.KstateStateHolder {

                @StateObject private var stateHolderObservable: ObservableStateHolder<StateHolder>

                init(wrappedValue: StateHolder) {
                    _stateHolderObservable = StateObject(wrappedValue: ObservableStateHolder(wrappedValue))
                }

                var wrappedValue: StateHolder {
                    get { return stateHolderObservable.stateHolder }
                    set { stateHolderObservable.stateHolder = newValue }
                }

                var projectedValue: ObservedObject<ObservableStateHolder<StateHolder>>.Wrapper {
                    self.${'$'}stateHolderObservable
                }
            }
            
        """.trimIndent()

        val expectedRelativeFilesPath = "templates"
        getSettingsFile().writeText("")
        getBuildFile().writeText(
            """
        plugins {
            id('com.jstarczewski.kstate.generate')
        }
        
        swiftTemplates {

            outputDir = "$expectedRelativeFilesPath"
            sharedModuleName = "shared"
        }
        """
        )
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("generateSwiftTemplates")
        runner.withProjectDir(getProjectDir())
        runner.build()

        val content = File("${getProjectDir().absolutePath}/$expectedRelativeFilesPath/StateStateHolder.swift")
            .readText()
        assertEquals(expectedStateStateHolderContent, content)
    }

    @Test
    fun `blank outputDir should result in generation failure`() {
        getSettingsFile().writeText("")
        getBuildFile().writeText(
            """
        plugins {
            id('com.jstarczewski.kstate.generate')
        }
        
          swiftTemplates {

            outputDir = "  "
            sharedModuleName = "common"
        }
        """
        )
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("generateSwiftTemplates")
        runner.withProjectDir(getProjectDir())
        try {
            runner.build()
            fail("Configuration should crash on invalid data")
        } catch (_: Exception) {
        }
    }

    @Test
    fun `empty sharedModuleName should result in generation failure`() {
        getSettingsFile().writeText("")
        getBuildFile().writeText(
            """
        plugins {
            id('com.jstarczewski.kstate.generate')
        }
        
          swiftTemplates {

            outputDir = "te"
            sharedModuleName = ""
        }
        """
        )
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("generateSwiftTemplates")
        runner.withProjectDir(getProjectDir())
        try {
            runner.build()
            fail("Configuration should crash on invalid data")
        } catch (_: Exception) {
        }
    }
}

